import React, { useState, useEffect, useRef } from "react";

/*
  –ö–æ—Ä–æ—Ç–∫–æ:
  - –ü–µ—Ä—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: https://libretranslate.de/translate (POST)
  - –§–æ–ª–±–µ–∫: MyMemory (GET)
  - Debounce 600ms, —â–æ–± –Ω–µ –±–∏—Ç–∏ API –Ω–∞ –∫–æ–∂–µ–Ω —Å–∏–º–≤–æ–ª
  - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ REACT_APP_LIBRE_URL —É .env —è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä: http://localhost:5000/translate
*/

const LIBRE_URL =
  process.env.REACT_APP_LIBRE_URL || "https://libretranslate.de/translate";
const MYMEMORY_URL = "https://api.mymemory.translated.net/get";

export default function Translator() {
  const [text, setText] = useState("");
  const [translated, setTranslated] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [direction, setDirection] = useState("en-uk"); // en-uk –∞–±–æ uk-en
  const abortRef = useRef(null);

  // Debounce: 600ms –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –Ω–∞–±–æ—Ä—É
  useEffect(() => {
    if (!text.trim()) {
      setTranslated("");
      setError("");
      return;
    }
    const timer = setTimeout(() => doTranslate(text), 600);
    return () => {
      clearTimeout(timer);
      if (abortRef.current) abortRef.current.abort();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [text, direction]);

  // helper: fetch –∑ —Ç–∞–π–º–∞—É—Ç–æ–º + AbortController
  async function fetchWithTimeout(url, options = {}, timeout = 8000) {
    const controller = new AbortController();
    abortRef.current = controller;
    const id = setTimeout(() => controller.abort(), timeout);
    try {
      const res = await fetch(url, { ...options, signal: controller.signal });
      clearTimeout(id);
      return res;
    } finally {
      abortRef.current = null;
    }
  }

  async function doTranslate(q) {
    setLoading(true);
    setError("");
    setTranslated("");

    const [source, target] = direction.split("-");

    // 1) –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ LibreTranslate (POST)
    try {
      const res = await fetchWithTimeout(
        LIBRE_URL,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ q, source, target, format: "text" }),
        },
        8000
      );

      if (!res.ok) throw new Error(`Libre status ${res.status}`);
      const data = await res.json();
      // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { translatedText: "..." }
      if (data && data.translatedText) {
        setTranslated(data.translatedText);
        setLoading(false);
        console.log("–ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ Libre:", data.translatedText);
        return;
      } else {
        throw new Error("Libre –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—î —Ç—ñ–ª–æ");
      }
    } catch (e) {
      console.warn("Libre –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤:", e.message);
    }

    // 2) –§–æ–ª–±–µ–∫ ‚Äî MyMemory (GET)
    try {
      const url = `${MYMEMORY_URL}?q=${encodeURIComponent(
        q
      )}&langpair=${source}|${target}`;
      const res2 = await fetchWithTimeout(url, {}, 8000);
      if (!res2.ok) throw new Error(`MyMemory status ${res2.status}`);
      const d2 = await res2.json();
      const text2 = d2?.responseData?.translatedText;
      if (text2) {
        setTranslated(text2);
        setLoading(false);
        console.log("–ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ MyMemory:", text2);
        return;
      } else {
        throw new Error("MyMemory –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—î —Ç—ñ–ª–æ");
      }
    } catch (e2) {
      console.warn("MyMemory –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤:", e2.message);
    }

    // –Ø–∫—â–æ –æ–±–∏–¥–≤–∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏
    setError("‚ùå –û–±–∏–¥–≤–∞ —Å–µ—Ä–≤—ñ—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –∞–±–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ (–¥–∏–≤–∏—Å—å –∫–æ–Ω—Å–æ–ª—å).");
    setLoading(false);
  }

  return (
    <section id="translator" className="card">
      <h2>–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á</h2>

      <div className="direction">
        <label>
          <input
            type="radio"
            name="dir"
            value="en-uk"
            checked={direction === "en-uk"}
            onChange={() => setDirection("en-uk")}
          />
          <span>–ê–Ω–≥–ª ‚Üí –£–∫—Ä</span>
        </label>

        <label>
          <input
            type="radio"
            name="dir"
            value="uk-en"
            checked={direction === "uk-en"}
            onChange={() => setDirection("uk-en")}
          />
          <span>–£–∫—Ä ‚Üí –ê–Ω–≥–ª</span>
          </label>
      </div>

      <textarea
        placeholder="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç..."
        value={text}
        onChange={(e) => setText(e.target.value)}
      />

      {loading && <p>‚è≥ –ü–µ—Ä–µ–∫–ª–∞–¥...</p>}
      {error && <p style={{ color: "red" }}>{error}</p>}
      {translated && !loading && !error && <p>üëâ {translated}</p>}
    </section>
  );
}
